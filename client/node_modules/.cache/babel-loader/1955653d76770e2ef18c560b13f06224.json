{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\kwell\\\\Desktop\\\\rstore\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { BrowserRouter } from \"react-router-dom\";\nimport AppRouter from \"./components/AppRouter\";\nimport NavBar from \"./components/NavBar\";\nimport { observer } from \"mobx-react-lite\";\nimport { Context } from \"./index\";\nimport { check } from \"./http/userAPI\";\nimport { Spinner } from \"react-bootstrap\";\nimport \"../src/App.css\";\nimport { MyNavBar } from './components/MyNavBar';\nimport CookiesNotification from './components/';\nconst App = observer(_c = _s(() => {\n  _s();\n\n  const {\n    user\n  } = useContext(Context);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    check().then(data => {\n      user.setUser(true);\n      user.setIsAuth(true);\n    }).finally(() => setLoading(false));\n  }, []);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"grow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: [/*#__PURE__*/_jsxDEV(MyNavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CookiesNotification, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AppRouter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}, \"eoNEOO0XgZmELjwcufg9rFYsGdc=\"));\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App$observer\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/kwell/Desktop/rstore/client/src/App.js"],"names":["React","useContext","useEffect","useState","BrowserRouter","AppRouter","NavBar","observer","Context","check","Spinner","MyNavBar","CookiesNotification","App","user","loading","setLoading","then","data","setUser","setIsAuth","finally"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAqD,OAArD;AACA,SAAQC,aAAR,QAA4B,kBAA5B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAAQC,QAAR,QAAuB,iBAAvB;AACA,SAAQC,OAAR,QAAsB,SAAtB;AACA,SAAQC,KAAR,QAAoB,gBAApB;AACA,SAAQC,OAAR,QAAsB,iBAAtB;AACA,OAAO,gBAAP;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,OAAOC,mBAAP,MAAgC,eAAhC;AAEA,MAAMC,GAAG,GAAGN,QAAQ,SAAC,MAAM;AAAA;;AACvB,QAAM;AAACO,IAAAA;AAAD,MAASb,UAAU,CAACO,OAAD,CAAzB;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,KAAK,GAAGQ,IAAR,CAAaC,IAAI,IAAI;AACjBJ,MAAAA,IAAI,CAACK,OAAL,CAAa,IAAb;AACAL,MAAAA,IAAI,CAACM,SAAL,CAAe,IAAf;AACH,KAHD,EAGGC,OAHH,CAGW,MAAML,UAAU,CAAC,KAAD,CAH3B;AAIH,GALQ,EAKN,EALM,CAAT;;AAOA,MAAID,OAAJ,EAAa;AACT,wBAAO,QAAC,OAAD;AAAS,MAAA,SAAS,EAAE;AAApB;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBACI,QAAC,aAAD;AAAA,4BACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAvBmB,kCAApB;MAAMF,G;AAyBN,eAAeA,GAAf","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport {BrowserRouter} from \"react-router-dom\";\nimport AppRouter from \"./components/AppRouter\";\nimport NavBar from \"./components/NavBar\";\nimport {observer} from \"mobx-react-lite\";\nimport {Context} from \"./index\";\nimport {check} from \"./http/userAPI\";\nimport {Spinner} from \"react-bootstrap\";\nimport \"../src/App.css\"\nimport { MyNavBar } from './components/MyNavBar';\nimport CookiesNotification from './components/';\n\nconst App = observer(() => {\n    const {user} = useContext(Context)\n    const [loading, setLoading] = useState(true)\n\n    useEffect(() => {\n        check().then(data => {\n            user.setUser(true)\n            user.setIsAuth(true)\n        }).finally(() => setLoading(false))\n    }, [])\n\n    if (loading) {\n        return <Spinner animation={\"grow\"}/>\n    }\n\n    return (\n        <BrowserRouter>\n            <MyNavBar/>\n            {/* <NavBar /> */}\n            <CookiesNotification />\n            <AppRouter />\n        </BrowserRouter>\n    );\n});\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}